type ActiveOrder @entity(immutable: true) {
  id: ID! # uint256
  seller: Bytes! # address
  buyer: Bytes # address. 0x0000 ... if no one has bought yet
  item: String! # string
  qtty_to_sell: BigInt! # uint256
  price: BigInt # uint256
  timestamp: BigInt # uint256
}

type CancelFilledOrder @entity(immutable: true) {
  id: ID! # uint256
  seller: Bytes! # address
  buyer: Bytes! # address
  item: String! # string
  qtty_bought: BigInt! # uint256
  price: BigInt! # uint256
  timestamp: BigInt # uint256
}

type CancelOpenOrder @entity(immutable: true) {
  id: ID! # uint256
  seller: Bytes! # address
  item: String! # string
  qtty_to_sell: BigInt! # uint256
  price: BigInt! # uint256
  timestamp: BigInt # uint256
}

type OrderCreated @entity(immutable: true) {
  id: ID! # uint256
  seller: Bytes! # address
  item: String! # string
  qtty_to_sell: BigInt! # uint256
  price: BigInt! # uint256
  timestamp: BigInt # uint256
}

type OrderDelivered @entity(immutable: true) {
  id: ID! # uint256
  seller: Bytes! # address
  buyer: Bytes! # address
  item: String! # string
  qtty_bought: BigInt! # uint256
  price: BigInt! # uint256
  timestamp: BigInt # uint256
}

type OrderFilled @entity(immutable: true) {
  id: ID! # uint256
  seller: Bytes! # address
  buyer: Bytes! # address
  item: String! # string
  qtty_bought: BigInt! # uint256
  price: BigInt! # uint256
  timestamp: BigInt! # uint256
}
